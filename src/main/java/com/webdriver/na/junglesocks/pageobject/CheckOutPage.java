/**
 *   File Name: CheckOutPage.java<br>
 *
 *   Adams, Nik<br>
 *   Created: Feb 8, 2016
 *
 */

package com.webdriver.na.junglesocks.pageobject;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;

/**
 * CheckOutPage //ADDD (description of class)
 * <p>
 * //ADDD (description of core fields)
 * <p>
 * //ADDD (description of core methods)
 *
 * @author Adams, Nik
 * @version 1.0.0
 * @since 1.0
 *
 */
public class CheckOutPage {

	@FindBy(css = "h1")
	private WebElement checkoutPageErrorTxt;

	private WebDriver driver;

	@FindBy(id = "subtotal")
	private WebElement subtotalTxt;

	@FindBy(id = "taxes")
	private WebElement taxesTxt;

	@FindBy(id = "total")
	private WebElement totalAmountTxt;

	public CheckOutPage(WebDriver driver) {
		this.driver = driver;
	}

	/*
	 * Retrieves error message text from invalid Shopping cart when state not
	 * selected
	 */
	public String getCheckoutPageError() {
		return this.checkoutPageErrorTxt.getText();
	}

	/*
	 * Gets item quantity submitted by the user and displayed on the Checkout
	 * Page. Items retrieved as list of children of the item name
	 */
	public int getItemQty(String name) {
		By itemLocator = By.cssSelector("tr.line_item." + name.toLowerCase() + " >td");
		List<WebElement> elements = this.driver.findElements(itemLocator);
		return Integer.parseInt(elements.get(2).getText());

	}

	/*
	 * Retrieves the SubTotal amount generated by the server on the shopping
	 * cart. All non numeric characters are removed from string
	 */
	public double getSubtotalTxt() {
		String subTotal = this.subtotalTxt.getText().substring(1);
		subTotal = subTotal.replaceAll(",", "");
		return Double.parseDouble(subTotal);
	}

	/*
	 * Gets the total tax amount generated by the Shopping cart on the server
	 * side. All non numeric characters are removed from the string
	 */
	public double getTaxesTxt() {
		String tax = this.taxesTxt.getText().substring(1);
		tax = tax.replaceAll(",", "");
		return Double.parseDouble(tax);

	}

	/*
	 * Retrieves the total amount calculated by the server on the Checkout Page.
	 * All non numeric characters are removed from the string for parsing
	 */
	public double getTotalAmountTxt() {
		String total = this.totalAmountTxt.getText().substring(1);
		total = total.replaceAll(",", "");
		return Double.parseDouble(total);
	}

	/*
	 * Gets the total price of each item (by name) by multiplying the price by
	 * amount. Values are retrieved as a list of the children of the name of the
	 * item
	 */
	public double getTotalItemPrice(String name) {
		By itemLocator = By.cssSelector("tr.line_item." + name.toLowerCase() + " >td");
		if (this.driver.findElements(itemLocator).size() == 0) {
			return 0;
		}
		List<WebElement> elements = this.driver.findElements(itemLocator);

		return Integer.parseInt(elements.get(1).getText()) * Integer.parseInt(elements.get(2).getText());
	}
}
